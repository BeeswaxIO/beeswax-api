// Copyright 2015, Beeswax.IO Inc.
//
// Beeswax bidder API.

syntax="proto2";
package bid;

option java_package = "com.beeswax.bid";

import "beeswax/bid/adcandidate.proto";
import "beeswax/openrtb/openrtb.proto";

// Stinger will issue a HTTP request to the bid agent.
// The following message will be present in the body of the HTTP request.
message BidAgentRequest {
  // Fully augmented bid request.
  optional openrtb.BidRequest bid_request = 1;
  // Adcandidate is a wrapper around a line item and creatives.
  // Stinger determines all the adcandidates that are eligible to serve for
  // the given bid request.
  repeated Adcandidate adcandidates = 2;
}

// Bid agent will respond to Stinger with a HTTP response.
// The following message will be present in the body of the HTTP response.
// BidAgent can choose not to bid at all in which case it must still
// respond to the HTTP request with a 204 status code.
message BidAgentResponse {

  // AgentParams are typed <key,value> pairs denoting some custom attributes
  // of the Bid agent.
  // These params are logged and are available via Bid logs.
  // Some use cases of AgentParams:
  // - If the bidding agent uses a machine learning model, some of its
  //   attributes can be passed in via AgentParams.
  // Next Id: 6
  message AgentParams {
    optional string key = 1;
    oneof value_oneof {
      string string_value = 2;
      int32 int_value = 3;
      double double_value = 4;
      bool bool_value = 5;
    }
  }

  // Next Id: 3
  // AgentData is a container for the AgentParams (defined above) and an
  // identifier for the Agent.
  // A use case for agent_id could be the release version of the Bid Agent.
  message AgentData {
    optional string agent_id = 1;
    repeated AgentParams agent_params = 2;
  }

  // Next Id: 4
  // Creative represents the creative to be rendered in the openrtb bid
  // response.
  message Creative {
    // The id of the chosen creative. It should be one of the ids in
    // Adcandidate.creative_ids where the Adcandidate's line_item_id ==
    // Bid.line_item_id for the Bid containing this Creative message,
    // otherwise the bid will not be processed.
    optional uint64 id = 1;
    // Pixels that will be fired when the creative is served in addition
    // to the `pixels` field, which is set in `creative` object from buzz.
    // (see http://docs.beeswax.com/docs/creative)
    // This field should not be populated when the battr field has
    // AD_SUPPORTS_DYNAMIC_PIXELS(108), otherwise this bid will not be
    // processed.
    // battr field is under BidAgentRequest.bid_request.imp.(banner/video).battr
    // ; whether it is banner or video corresponds to the type of this creative.
    repeated string pixels = 2;
    // The `creative` object's `click_url` field, which is set from buzz,
    // will be replaced with this value if it is present.
    // (see http://docs.beeswax.com/docs/creative)
    // This field should not be populated when the battr field has
    // AD_SUPPORTS_DYNAMIC_CLICK_URL(109), otherwise this bid will not be
    // processed.
    // battr field is under BidAgentRequest.bid_request.imp.(banner/video).battr
    // ; whether it is banner or video corresponds to the type of this creative.
    optional string click_url_override = 3;
  }

  // Bid agent needs to select a set of Adcandidates from the request
  // and for each Adcandidate, submit a bid containing the following
  // information.
  message Bid {
    optional uint64 line_item_id = 1;
    optional uint64 bid_price_micros_usd = 2 [default = 0];
    optional uint64 creative_id = 3 [deprecated = true];
    optional Creative creative = 5;
    optional AgentData agent_data = 4;
  }
  repeated Bid bids = 1;
}
