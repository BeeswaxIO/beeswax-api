// Copyright 2022, Beeswax.IO Inc.
//
// Representation of an AdGroup: <LineItem, [Creatives]>

syntax="proto2";
package stinger;

option java_package = "com.beeswax.stinger";
option cc_enable_arenas = true;

import "beeswax/adgroup/bid_modifier.proto";
import "beeswax/adgroup/creative.proto";
import "beeswax/adgroup/native.proto";
import "beeswax/adgroup/targeted_values.proto";
import "beeswax/adgroup/vendor_fee.proto";
import "beeswax/adgroup/ghost_bidding.proto";
import "beeswax/augmentors/augmentors.proto";
import "beeswax/billing/billing.proto";
import "beeswax/privacy/vendor_ids.proto";
import "beeswax/matcher/query.proto";
import "beeswax/matcher/target_key_values.proto";
import "beeswax/openrtb/openrtb_common.proto";
import "beeswax/currency/currency.proto";

// Next Id: 8
message Advertiser {
  repeated openrtb.ContentCategory category = 1;
  repeated int32 id = 2;  // Advertiser Id based on Google.
  // This is the URL declared by the advertiser as the final landing page
  // of the creative.
  // This is the URL that needs to be submitted to exchanges that ask for it.
  // For example, Adx requires this URL to be specified in the Bid Response.
  repeated string landing_page_url = 3;
  // OpenRTB BidResponses require adomain(advertiser domain)
  // "adomain" is the domain (only) from the landing_page_url. "http://" etc are removed
  repeated string adomain = 4;
  // Third-party ID assigned by Account or Advertiser. Not used internally.
  optional string alternative_id = 5;
  // Bundle or package name of the app being advertised for blacklist checking.
  // Equivalent to adomain when a web site is being advertised.
  repeated string app_bundle = 6;
  // SpotX-specific feature to allow custom categories to be passed through the system
  // until FES replaces bid.cat comments with them in the returned bid. Used by SpotX
  // when bidding on its own exchange.
  repeated int64 spotx_advertiser_categories = 7;
}

// Next Id: 6
message TechAttributes {
  optional int32 width = 1 [default = 0];
  optional int32 height = 2 [default = 0];
  optional int32 size_bytes = 3 [default = 0];
  optional bool secure = 4 [default = false];
  repeated openrtb.Enums.BidRequest.Impression.ApiFramework api = 5;
}

// Next Id: 3
message Banner {
  repeated string mime = 1;
  repeated openrtb.Enums.BidRequest.Impression.Banner.AdType tag_type = 2;
}

// Next Id: 11
message Video {
  // id 9: has_companions
  reserved 9;
  optional bool skippable = 1;
  optional int32 duration = 2;
  repeated string mime = 3;
  repeated int32 bit_rate = 4;
  repeated openrtb.Enums.BidRequest.Impression.Video.Protocol protocol = 5;
  repeated openrtb.Enums.BidRequest.Impression.Video.CompanionType companion_type = 7;
  optional string vast_3pas_url = 8;

  // CompanionAd contains a subset of the fields in Impresssion.Banner
  // since we are only using some of the fields found in the Banner message.
  repeated CompanionAd companionads = 10;

  // Deprecated:
  repeated openrtb.Enums.BidRequest.Impression.ApiFramework api = 6 [deprecated = true];
}

// Next tag: 3
message CompanionAd {
  optional int32 width = 1;
  optional int32 height = 2;
}

// Next Id: 3
message CreativeVar {
  optional string name = 1;
  optional string value = 2;
}

// Next Id: 2
message CreativeVarSet {
  repeated CreativeVar creative_vars = 1;
}

// Next Id: 3
message SectionVar {
  optional string name = 1;
  repeated CreativeVarSet creative_var_sets = 2;
}

// Next Id: 3
message CreativeApproval {
  optional openrtb.Enums.Inventory.Source inventory_source_id = 1;
  optional bool is_approved = 2;
}


// Next Id: 4
// A render phase is conceptually an invocation of CreativeBuilder.
// These are the configs that the CreativeBuilder should use for a given phase.
// Phases are ordered, starting from 0.
message RenderPhaseConfig {
  optional int32 phase_id = 1;
  optional int32 creative_template_id = 2;
  // The path to the creative template if it is stored remotely.
  optional string creative_template_path = 3;
}


// Next Id: 32
message Creative {
  reserved 23, 24;

  optional uint64 id = 1;
  // User assigned name for expanding the {{CREATIVE_NAME}} macro.
  optional string creative_name = 30;
  // Third-party id assigned by Account or Advertiser. Not used internally.
  optional string alternative_id = 19;

  // Creative start and end time, in seconds since epoch.
  optional int32 start_timestamp = 3;
  optional int32 end_timestamp = 4;

  // creative attributes
  enum Type {
    UNKNOWN = -1;
    BANNER = 0;
    VIDEO = 1;
    NATIVE = 2;
  }
  optional Type type = 2;
  optional Advertiser advertiser = 5;
  optional TechAttributes tech_attr = 6;
  optional Banner banner = 7;
  optional Video video = 8;
  optional adgroup.Native native = 21;
  // Honeypot will redirect user clicks to click_destination_url.
  // Note that click_destination_url is not required to be same as the
  // landing_page_url defined in the Advertiser message.
  // In most cases they will be the same.
  // However in some cases, click_destination_url could point to an ad server that
  // counts clicks and finally redirects to the landing_page_url.
  optional string click_destination_url = 9;

  // Drone populates list of Beeswax-supported macros present in "click_destination_url".
  // This is relevant for exchanges with "render_macros_in_creative" = false such as AppNexus.
  // SBS adds URL-encoded version of these macros to the "expanded_creative_vars".
  // Note: This is a CPU optimization for SBS.
  //
  // eg. if "APP_NAME" macro is present in "click_destination_url_macros",
  // SBS adds "APP_NAME_ESC" to the expanded_creative_vars.
  repeated string click_destination_url_macros = 16;

  repeated CreativeApproval approval = 12;
  // URL to an image thumbnail for the creative.
  // This field will be automatically set if you associate
  // the creative with a Creative Asset that has a valid thumbnail.
  optional string thumbnail_url = 14;
  // Drone populates Beeswax-supported creative attibutes such as
  // AD_HAS_THUMBNAIL, AD_SIZE_IS_FLEXIBLE.
  repeated openrtb.CreativeAttribute creative_attributes = 17;
  // third_party_imp_urls is used to populate the same field name
  // in adcandidates and will eventually be in the bid response if the
  // exchange supports impression trackers for the particular segment of
  // inventory.
  // This is determined by inventory_config.imp_tracker field.
  // (1) Drone copies every value of ADDITIONAL_PIXELS sections' PIXEL_URL
  // creative_vars.
  // (2) Stinger copies `dynamic` additional_pixels from bid agent response
  // (BidAgentResponse.Bid.Creative.additional_pixels).
  // (3) Stinger expands the macros and copies to Adcandidate.
  repeated string third_party_imp_urls = 15;
  // Rendering vars.
  optional int32 creative_template_id = 10 [deprecated = true];
  repeated RenderPhaseConfig render_phase_configs = 22;
  repeated CreativeVar creative_vars = 11;
  repeated SectionVar section_vars = 13;
  repeated adgroup.VendorFee vendor_fee = 18;
  repeated adgroup.Creative.Macro dynamic_macros = 20;

  // The gdpr vendors associated with this creative. This is configured on a per exchange
  // basis, depending on whether the exchange wishes to check this field, the vendors in
  // this list may impact whether the creative matches a bid request in targeting.
  optional privacy.VendorIds exchange_enforced_vendor_ids = 27;

  // The gdpr vendors associated with this creative independent of exchange.
  // If vendors are listed in this field, then they must appear within the consent string on the bid request
  // in order for the creative to match targeting.
  optional privacy.VendorIds creative_enforced_vendor_ids = 31;

  repeated int32 creative_technology_vendor = 25;
  // This is an integer between 1 and 100.
  optional uint32 weighting = 26 [default = 50];
  // `campaign_id` in the Apple's SKAdNetwork's terminology
  optional uint32 skad_id = 28;
  // This is used to selectively apply creative matching rules so that creatives
  // using a particular measurement vendor will be eligible only under the conditions
  // that the vendor can support. This is expected to be set to the value of the
  // vendor buzz key for a global vendor in buzz (e.g. dv).
  optional string measurement_vendor_buzz_key = 29;
}

// Next Id: 6
// Bid agent custom parameters that are logged
// and made available via the Bid logs.
message AgentParams {
  optional string key = 1;
  oneof value_oneof {
    string string_value = 2;
    int32 int_value = 3;
    double double_value = 4;
    bool bool_value = 5;
  }
}

// Next Id: 3
// Container for the AgentParams (defined above) and
// a customer-specified ID of the Bid Agent.
message AgentData {
  optional string agent_id = 1;
  repeated AgentParams agent_params = 2;
  optional bool send_to_exchange = 3 [default = false];
}

// Next Id: 21
message Bidding {
  // Strategy determines the data schema in bid agent request.
  // See messages `*Strategy` in message `Bidding`
  // in beeswax/bid/adcandidate.proto.
  enum Strategy {
    UNKNOWN_BIDDING_STRATEGY = -1;
    CPM_BID = 0;
    CPC_BID = 1;
    // TODO: Drop this in favor of Bidding.Pacing.PacingType.CPM_PACED.
    CPM_PACED = 2 [deprecated = true];
    // TODO: Drop this in favor of Bidding.Pacing.PacingType.CPM_PACED_AND_OPTIMIZED.
    CPM_PACED_AND_OPTIMIZED = 3 [deprecated = true];
    VCR_BID = 5;
    VCR_PACED = 6;
    CUSTOM = 4;
    CPC_PACED = 7;
  }
  optional Strategy strategy = 1 [default = UNKNOWN_BIDDING_STRATEGY];
  // BiddingAgentType determines which bidding agent this line item
  // will be dispatched to.
  //
  // The reason why we need BiddingAgentType is complicated.
  // Ideally, we should be able to use Strategy to infer the bidding agent type.
  // For instance, if (Strategy == CUSTOM) then BiddingAgentType = CUSTOM_BIDDING_AGENT
  // But unfortunately, we have old customers such as Tresensa who have a custom bidding agent
  // and receive a strategy in the bid agent request which is CPC_BID or CPM_BID.
  // Hence, we need BiddingAgentType and Drone determines the value of this based on a Boolean
  // field in Buzz.
  enum BiddingAgentType {
    UNKNOWN_BIDDING_AGENT = -1;
    HEXBID = 1;
    CUSTOM_BIDDING_AGENT = 2;
    // deprecated: DEFAULT = 0
  }
  optional BiddingAgentType bidding_agent_type = 10 [default = UNKNOWN_BIDDING_AGENT];
  // Bid price in local currency described in flat_bid.
  // The currency is set at the campaign level and converted to the USD based
  // bid_price_micros_usd during BidAgent response processing.
  optional uint64 flat_bid_micros = 2;
  optional uint64 max_bid_micros = 3;
  optional uint64 min_bid_micros = 21;
  optional currency.CurrencyAmount flat_bid = 13;
  optional currency.CurrencyAmount max_bid = 14;
  optional currency.CurrencyAmount min_bid = 22;
  // TODO: Deprecate ecpc_target in favor of strategy_target.
  optional double ecpc_target = 4;
  // Optimization target for strategies like VCR, CPC.
  optional double strategy_target = 16;
  // TODO: Drop this in favor of == Bidding.Pacing.PacingType.PACING_TYPE_NONE.
  optional bool pace_delivery = 5 [default = false, deprecated = true];

  // This message holds settings used by Pacemaker to control pacing.
  // PacingType CPM_PACED means lineitem-level pacing using Beeswax pacing.
  // PacingType CPM_PACED_AND_OPTIMIZED means Beeswax lineitem-level pacing
  // with additional optimizing to pay less than configured fixed_price.micros.
  // PacingType VCR_PACED means lineitem is using Beeswax pacing with VCR optimization.
  // PacingType CUSTOM_PACED means lineitem with custom strategy is using Beeswax pacing.
  // PACING_TYPE_NONE means the lineitem is not using Beeswax pacing.
  // PacingDuration controls pacing to FLIGHT, DAILY or LIFETIME duration.
  message Pacing {
    enum PacingType {
      PACING_TYPE_NONE = 0;
      CPM_PACED = 1;
      CPM_PACED_AND_OPTIMIZED = 2;
      VCR_PACED = 3;
      CUSTOM_PACED = 4;
      CPC_PACED = 5;
    }
    optional PacingType pacing_type = 2 [default = PACING_TYPE_NONE];

    enum PacingDuration {
      PACING_DURATION_NONE = 0;
      DAILY = 1;
      LIFETIME = 2;
      FLIGHT = 3;
    }
    optional PacingDuration pacing_duration = 3 [default = PACING_DURATION_NONE];
  }
  optional Pacing pacing = 15;

  // Populated by Drone Adgroup pusher for lines that have
  // a custom bidding strategy.
  message CustomStrategy {
    optional string name = 1;
    message Params {
      optional string key = 1;
      optional string value = 2;
    }
    repeated Params custom_params = 2;
  }
  optional CustomStrategy custom_strategy = 9;
  // The currency of this bid.
  optional currency.Currency.Code currency = 12 [default = USD];

  // Following fields are populated in Adcandidate by Stinger.
  // These values are obtained by Stinger from the bid agent.
  optional uint64 bid_price_micros_usd = 6 [default = 0];
  optional currency.CurrencyTransaction bid_price = 11;

  // Following fields are populated in Adcandidate by FES.
  // Exchange bid price is the final price that FES submits to exchange.
  optional uint64 exchange_bid_price_micros_usd = 7 [default = 0];

  // Agent ID and params.
  optional AgentData agent_data = 8;
  // Agent data from Hexbid, for internal use only.
  optional AgentData hexbid_data = 17;
  // whether we should do bid shading for this line
  optional bool bid_shading = 18;

  enum BidShadingControl {
    NORMAL = 0;
    LESS_AGGRESSIVE = 1;
    MORE_AGGRESSIVE = 2;
  }
  optional BidShadingControl bid_shading_control = 19;
  // Deal based CPM, set based on the matching deal ID.
  // Price is set for 1000 impressions, in the currency set up at the
  // compaign level.
  optional uint64 deal_override_price_cpm_micros = 20;
}

// ID type used by both frequency capping and experiments.
// Placed inside a message for better scoping than plain enums.
message Target {
  enum IdType {
    BITO_OR_MAID = 0;
    IP_ADDR = 1;
    CUSTOMER = 2;
    TAPAD_PERSON = 3;
    TAPAD_HOUSEHOLD = 4;
    LIVERAMP_PERSON = 5;
    LIVERAMP_HOUSEHOLD = 6;
    IDFV = 7;
  }
}

// Next Tag: 7
message Experiment {
  optional uint64 test_group_id = 1;
  optional string test_group_name = 2;
  optional uint32 start_index_inclusive = 3;
  optional uint32 end_index_inclusive = 4;
  optional uint64 test_plan_id = 5;
  optional Target.IdType experiment_id_type = 6;
}

// Next Id: 6
message FrequencyCap {
  enum IdType {
    option deprecated = true; // use Target.IdType
    BITO_MAID = 0;
    IP = 1;
    BITO_MAID_IP = 2;
    CUSTOMER_BITO_MAID = 3;
  }
  // Allowed number of impressions in the duration.
  optional uint32 max_impressions = 1;
  // The duration (in seconds) in which max_impressions should not be exceeded.
  optional uint32 duration_seconds = 2;
  // Actual impression served in the duration.
  optional uint32 current_impression_count = 3;
  // Type of ID to use for cap.
  optional IdType id_type = 4 [deprecated = true];
  // Sequence of ID types to fcap on.
  repeated Target.IdType target_id_sequence = 5;
}

// Next Id: 9
message Budget {
  enum Duration {
    LIFETIME = 0;
    DAY = 1;
  }
  enum CounterType {
    SPEND = 0;
    IMPRESSIONS = 1;
  }

  optional Duration duration = 1;
  optional CounterType counter_type = 2;
  optional uint64 cap = 3;

  // Consumed and allocated and Inflight are populated in AdCandidate
  // by the BudgetManager.
  // Allocated refers to funds allocated in a particular zone.
  optional uint64 allocated = 6;
  optional uint64 consumed = 4;
  optional uint64 inflight = 5;
  optional uint64 delayed_spend = 7 [deprecated = true];
  optional uint64 unobserved_spend = 8;
}

// Next Id: 12
// Details on the fees (like segment fees, vendor fees, etc.)
// which need to be applied to the budget system (apart from media fees).
message BudgetFees {
  // If true, customer-defined vendor fees and data provider vendor fees will be
  // included in the `win_price_usd_micros`.
  optional bool include_vendor_fees = 1;

  // This field is populated by Stinger.
  // It is the sum of the segment_fees of all the segments that matched the request.
  // Details: https://goo.gl/j2jtsH.
  // Always in USD.
  optional int64 segment_fees_cpm_micros = 2;

  // This field is calculated and populated by Drone.
  // This is the sum of the vendor_fees set up by the customer for this line item.
  // Only the vendor fees with FeeType == 'CPM' are included.
  // Always in USD.
  optional int64 total_cpm_type_vendor_fees_usd_micros = 3;

  // This field is calculated and populated by Drone.
  // This is the sum of the vendor_fees set up by the customer for this line item.
  // Only the vendor fees with FeeType == 'PERCENT' are included.
  // Always in USD.
  optional int64 total_percent_type_vendor_fees_micros = 4;

  // This field is calculated and populated by Stinger.
  // This is the sum of the vendor fees associated with the particular creative selected
  // at serving time. Each creative can have its own associated vendor fees in Buzz, so
  // this contribution to the BudgetFee for the impression depends on which creative was served.
  // Always in USD.
  optional int64 creative_vendor_fees_cpm_micros = 5;

  // This field is calculated and populated by Stinger.
  // This is the vendor fee associated with the particular creative selected at serving time, expressed as a percentage.
  // The FeeType 'PERCENT' is applied to the adjusted exchange clearing price.
  optional int64 creative_percent_type_vendor_fees_micros = 10;

  // The contents of this message are calculated and populated by Stinger.
  // The percentage is used to adjust bid_price and exchange clearing price when fee_type is BID_REDUCTION.

  message AccountLevelRevenueShare {
    optional billing.Customer.Seat.FeeType fee_type = 1;


    optional int64 pct_micros = 2;
  }
  optional AccountLevelRevenueShare account_level_revenue_share = 11;
}

// Next Id: 4
message Revenue {
  enum RevenueType {
    CPM = 0; // Cost per 1000 impressions
    CPC = 1; // Cost per click
    CPCV = 2; // Cost per completed video

    // Honeycomb treats both actions and installations as conversions.
    // CPI and CPA have same implementation in honeycomb and both take into account
    // the number of conversions received when calculating revenue
    CPA = 3; // Cost per action
    CPI = 4; // Cost per installation
  }
  optional int64 revenue_amount_micros = 1;
  optional currency.CurrencyTransaction revenue_amount = 3;
  optional RevenueType revenue_type = 2;
}

// Next Id: 11
// DEPRECATED: Use VendorFee definition from beeswax/adgroup/vendor_fee.proto.
// VendorFee is populated by 2 writers.
// - AdgroupPusher:
//    For vendors setup by customer using Buzz.
//    For creatives.creative_vendors provided by Beeswax to customer in Buzz (e.g. Moat),
//    or setup by customer using Buzz.
// - SBS segment_pricing_augmentor:
//    - For all matched data_providers segments from lineitems.
// SBS also combines the vendor fees from the selected creative after creative selection with the
// vendor fees from the lineitem to calculate the final total vendor fee cost.
message VendorFee {
  option deprecated = true;  // use VendorFee definition from beeswax/adgroup/vendor_fee.proto
  enum FeeType {
    CPM = 0;
    PERCENT = 1;
  }
  optional int32 vendor_id = 1;
  // For data_provider segments, vendor_name is set to data_provider_key.
  optional string vendor_name = 2;
  optional int32 vendor_fee_id = 3;
  // For data_provider segments, vendor_fee_name is set to segment_key.
  optional string vendor_fee_name = 4;
  // Represents percent charge micros or cpm charge micros depending "fee_type".
  optional int64 fee_amount_micros = 5;
  optional currency.CurrencyTransaction fee_amount = 9;
  optional FeeType fee_type = 6;
  enum VendorType {
    // When vendor is from Buzz and setup by the customer.
    CUSTOMER = 1;
    // When SBS segment_pricing_augmentor matches on a FES data_provider segment.
    DATA_PROVIDER = 2;
  }
  optional VendorType vendor_type = 7;
  optional currency.Currency.Code currency = 8 [default = USD];
  // Some billing rules (e.g. DV) needs to look at the billing category.
  optional string billing_category = 10;
}

// A map from data provider segment to its negated segment pricing info.
// For each data provider, this segment has the highest price among those
// having the negated form that should be charged in segment query.
// Next Id: 5
message NegatedSegmentPricing {
  optional string data_provider_key = 1;
  optional string segment_key = 2;
  optional currency.CurrencyAmount cpm_cost_amount = 3;
  optional string data_provider_billing_key = 4;
}

// Next Id: 5
message Flight {
  // Unique flight ID.
  optional uint64 flight_id = 1;
  // Flight start time in seconds since epoch (required).
  optional int32 start_timestamp = 2;
  // Flight end time in seconds since epoch (optional for last flight).
  optional int32 end_timestamp = 3;
  // Budgets for this flight. it may have none.
  repeated Budget budgets = 4;
}

// Next Id: 51
message LineItem {
  // id 22: negated_segment_pricing
  reserved 22;
  optional uint64 id = 1;
  optional uint64 account_id = 2;
  optional uint64 campaign_id = 3;
  optional uint64 advertiser_id = 15;
  // User assigned name for populating the {{LINE_ITEM_NAME}} macro.
  optional string line_item_name = 41;
  // User assigned name for populating the {{CAMPAIGN_NAME}} macro.
  optional string campaign_name = 42;
  // User assigned name for populating the {{ADVERTISER_NAME}} macro.
  optional string advertiser_name = 43;
  // Third-party id assigned by Account or Advertiser. Not used internally.
  optional string alternative_id = 18;
  repeated Flight flights = 26;

  // Lineitem start and end time, in seconds since epoch.
  optional int32 start_timestamp = 4;
  optional int32 end_timestamp = 5;
  optional string targeting_expression_json = 6 [deprecated = true];
  optional string boolean_matcher_targeting_expr = 21 [deprecated = true];
  repeated string passthrough_deal_list_ids = 27;
  optional Bidding bidding = 8;
  // This field will be populated iff the line item is enabled for ghost bidding.
  optional adgroup.GhostBidding ghost_bidding = 33;
  repeated FrequencyCap frequency_cap = 9;
  repeated Budget budgets = 10;
  optional BudgetFees budget_fees = 16;
  optional Revenue revenue = 12;
  repeated adgroup.VendorFee vendor_fee = 13;
  optional adgroup.VendorFeesInfo vendor_fees_info = 25;
  optional matcher.QueryMessage segment_targeting = 14;
  repeated matcher.TargetKeyValues logging_target_values_candidates = 28;
  // Buzz groups multiple bid modifiers of each lineitem and assigns a
  // single bid_modifier_id. It is only used for reporting logs.
  // (See adgroup/bid_modifier.proto for the description of modifier_id
  // used for indexing and matching, which has no relation to this field.)
  optional int64 buzz_bid_modifiers_set_id = 24;
  repeated adgroup.BidModifier bid_modifiers = 23;
  repeated string user_timezones = 34;
  enum CreativeWeightingMethod {
    RANDOM = 0;
    WEIGHTED = 1;
  }
  optional CreativeWeightingMethod creative_weighting_method = 29;
  // SegmentExtension is used in cross device targeting.
  // This field is the configuration setting for how segments targeted by this line item should be extended.
  enum SegmentExtension {
    // No extension.
    NONE = 0;
    // Extend to person.
    PERSON = 1;
    // Extend to household.
    HOUSEHOLD = 2;
    // Target the person extension only.
    PERSON_EXTEND_ONLY = 3;
    // Target the household extension only.
    HOUSEHOLD_EXTEND_ONLY = 4;
  }
  optional SegmentExtension segment_extension = 30 [default = NONE];

  // The following fields are populated in Adcandidate by Stinger.
  repeated uint32 imp_timestamps = 11;
  // The last rx timestamp in seconds when the ad was served.
  // Will not be populated if the line_item/campaign does not have
  // any impression in the past 30 days.
  optional uint32 last_imp_timestamp = 19;
  // For backward compatibility. Rm after reporting update.
  optional Experiment device_experiment = 31 [deprecated = true];
  optional Experiment experiment_user = 32;
  // Deprecated fields.
  optional int64 lifetime_budget_micros = 7 [deprecated = true];
  //

  optional bool require_augment = 35;
  repeated augmentors.Augmentors required_augmentors = 40;
  repeated string deal_id = 36;
  repeated string deal_id_list = 37;
  // Map from deal_ids to CPM overrides. In the same currency as flat_bid_micro,
  // set at the Campaign level.
  map<string, uint64> deal_override_price_cpm_micros_map = 47;
  // The subset of targeting expression containing ranged predicates.
  optional matcher.QueryMessage range_targeting_query = 38;
  // A human readable representation of the full targeting expression
  // associated with this line item. Should not be used for anyting other
  // than debugging or informational endpoints. Use a more structured and
  // non-string based format for other production use cases.
  optional string debug_targeting_str = 39;

  // Enable programmatic guaranteed.
  optional bool guaranteed = 44;
  optional Target.IdType bid_model_target_id = 45;
  optional bool has_segment_recency_feature = 46;

  // Revenue share between buzz keys and their end customers identified by accounts.
  // - The amount is a percentage of exchange clearing price.
  // - Depending on the fee_type :
  //   - BID_REDUCTION: the amount is included in media spend.
  //   - FEE: the amount is listed as a vendor fee.
  // - The amount is always logged by HPE as account_level_revenue_share_micros_usd.
  // Next Id: 4
  message AccountLevelRevenueShare {
    // Account level revenue share applies to all seat types when this field is not set.
    optional billing.Customer.Seat.Type applicable_seat_type = 1;
    optional billing.Customer.Seat.FeeType fee_type = 2;
    optional int64 pct_micros = 3;
  }
  optional AccountLevelRevenueShare account_level_revenue_share = 48;

  // Ghost bid is marked at LineItem level, though customer has the choice to make a
  // default ghost bid config at Campaign level. If ghost bid is enabled then
  // is_ghost_bidding_enabled is true. If no ghost_bidding_id_type is defined, then
  // assume it's the STANDARD type, which is IP_ADDR for CTV request and BITO_OR_MAID
  // for the rest.
  optional bool is_ghost_bidding_enabled = 49;
  optional Target.IdType ghost_bidding_id_type = 50;
}

// Next Id: 14
message Campaign {
  repeated FrequencyCap frequency_cap = 2;
  repeated Budget budgets = 3;
  optional Revenue revenue = 5;
  repeated adgroup.VendorFee vendor_fee = 6;
  optional adgroup.VendorFeesInfo vendor_fees_info = 13;
  // Campaign start and end time, in seconds since epoch.
  optional int32 start_timestamp = 7;
  optional int32 end_timestamp = 8;
  // Whether this campaign is paced.
  optional bool pace_delivery = 9;
  // Third-party ID assigned by Account or Advertiser. Not used internally.
  optional string alternative_id = 10;

  // Following fields are populated in Adcandidate by Stinger.
  repeated uint32 imp_timestamps = 4;
  optional uint32 last_imp_timestamp = 12;

  // List of continents where this line is eligible to serve.
  repeated openrtb.Enums.Inventory.Continent serve_continents = 11;

  // Deprecated fields.
  optional int64 lifetime_budget_micros = 1 [deprecated = true];
}

// The budget period allows finding the budget key, if any, that is active
// at any given moment. This centralizes key generation and enables support
// for per-adgroup timezone selection.
//
// Evolution:
// Initially, Drone will populate period_start_secs and key_suffix. That
// key_suffix will start off in legacy format and switch over to standard
// format.
//
// Later, we will omit the key_suffix and have the budget period clients
// generate it. Much later, we may start using period_duration_secs and
// repetitions to allow run-length encoding.
//
// The budget period clients are expected to reject any currently
// unsupported values. So, for example, if the client isn't capable of
// generating key_suffix values from the period_start_secs, it must fail
// cleanly when key_suffix is omitted.
//
// Next Id: 6
message BudgetPeriod {
  // Start time of this period, in seconds since UTC epoch.
  //
  // Required.
  optional uint64 period_start_secs = 1;

  // Key suffix for this period.
  //
  // Standard format is the `period_start_secs` encoded as "yyyymmddhhmmss".
  // Legacy format was "yymmdd" of implied Eastern.
  //
  // Allows consumers to avoid all date conversions and math, as
  // well as enabling arbitrary key choices and legacy format support.
  //
  // When omitted, then implied to be the value of `period_start_secs` in
  // the standard format.
  //
  // Must be omitted when `repetitions` > 1.
  optional string key_suffix = 2;

  // Timezone names, e.g. 'American/New_York'. This field should only be used by
  // Pacemaker for daily budget pacing.
  optional string timezone_name = 5;

  // Seconds after `period_start_secs` when period ends.
  // Usually 24 hours, but can vary.
  //
  // Used as a deadman's switch to prevent extending a period
  // indefinitely when the schedule is not being regenerated.
  //
  // Also used for run-length encoding.
  //
  // When 0, this period is invalid.
  //
  // When omitted, implied to be the duration until the start
  // of the next period, divided by `repetitions`. When omitted
  // and there is no next period available, then implied to be
  // 24 hours.
  optional uint32 period_duration_secs = 3;

  // Repetitions of this period.
  //
  // Used for run-length encoding. Having `repetitions` > 1 is
  // incompatible with the presence of `key_suffix`.
  //
  // When 0, this period is invalid.
  //
  // When omitted, then implied to be 1.
  optional uint32 repetitions = 4;
}

// Next Id: 3
message BudgetSchedule {
  repeated BudgetPeriod budget_period = 1;

  // When the entire budget schedule expires, in seconds since UTC epoch.
  optional uint64 schedule_expires_secs = 2;
}

// Next Id: 8
message AdGroup {
  optional string buzz_key = 4;
  optional int64 customer_id = 5;
  optional BudgetSchedule budget_schedule = 6;
  optional Campaign campaign = 1;
  optional LineItem li = 2;
  repeated Creative creatives = 3;
  optional uint64 beeswax_vendor_id = 7;
}

// Next Id: 2
message AdGroupList {
  repeated AdGroup ad_groups = 1;
}

// Next Id: 10
message BillingInfo {
  //  Bids reduced by this rate for Beeswax revshare.
  optional int64 bid_reduction_rate_micros = 1;
  // Bids further reduced by this rate to account for discrepancies
  // between the impression numbers reported by the exchange and
  // computed by Beeswax.
  optional int64 exchange_discrepancy_rate_micros = 2;
  // In some cases such as direct deals or a custom bidder,
  // Beeswax charges fee as a percentage of the winning price of
  // the impression.
  // Note: This percentage does not affect bid value.
  optional int64 beeswax_fee_rate_micros = 3;
  // Unique id of the customer seat in Buzz FES.
  optional string seat_id = 8;
  // Seat type of the customer.
  optional billing.Customer.Seat.Type seat_type = 9;
}

// Next Tag: 3
message BidShadingFee {
  enum BidShadingFeeType {
    UNKNOWN = 0;
    // 1. A BidShadingFee will be VENDOR_FEE type if the Seat the customer belongs to is CUSTOMER_BILLABLE.
    // 2. The lineitem will have a VendorFee object representing the bid shading fee.
    // 3. The bid shading fee (as a vendor fee) will be included in
    //    budget_fees.total_cpm_type_vendor_fees_usd_micros if the budget type is "2" (budget_fees.include_vendor_fees is True)
    // 4. The bid shading fee will be included in the budget system's spend amount if the budget type of the lineitem is "2"
    //    (budget_fees.include_vendor_fees is True).
    // 5. media_spend will NOT contain the bid shading fee.
    // 6. The bid shading fee will show up in impression_details table and win log's as `bid_shading_fee_micros_usd`.
    VENDOR_FEE = 1;
    // 1. A BidShadingFee will be INCLUDED_IN_WINPRICE type if the Seat the customer belongs to is BEESWAX_BILLABLE
    // 2. Honeypot-event will include the bid shading fee (as an additional fee amount) into impression_event.win_cost_micros_usd.
    // 3. media_spend (calculated by waggle) will contain the bid shading fee.
    // 4. The bid shading fee will be included in the budget system's spend regardless of the budget type.
    // 5. The bid shading fee will show up in impression_details table and win log's as `bid_shading_fee_micros_usd`.
    INCLUDED_IN_WINPRICE = 2;
  }

  optional BidShadingFeeType bid_shading_fee_type = 1;
  optional int64 bid_shading_fee_micros_usd = 2;
}

// Information about bid shading like what group the event is in
// and what slice the request belongs to
// Next Tag: 6
message BidShadingInfo {
  enum BidGroup {
    UNKNOWN = 0;
    CONTROL = 1;
    TEST = 2;
  }

  enum BidShadeState {
    NOT_ELIGIBLE = 0;
    CONTROL_GROUP = 1;
    BID_SHADED = 2;
    RANDOM = 3;

  }
  optional BidGroup bid_group = 1 [default=UNKNOWN];
  optional string slice_id = 2;
  // state of bid shading
  optional BidShadeState bid_shade = 3 [default=NOT_ELIGIBLE];
  // micros we reduced the customer's bid price by.
  optional int64 bid_shade_reduction_micros = 4;
  optional BidShadingFee bid_shading_fee = 5;
}

// Adcandidate is a wrapper around a line item and its eligible creatives.
// Stinger generates adcandidates for every bid request.
// Adcandidates are also annotated with run-time information such as:
//  * bid price
//  * rendered creative
//  * available budget
//  * fcap info for the user, etc.

// Next Id: 25
message Adcandidate {

  // Next Id: 47
  enum Status {
    ALIVE               = 0;  // Have not been filtered. Ready for any operation.
    OK                  = 1;  // Submitted to exchange.
    NO_BID              = 4;  // No bid for the request.

    CUSTOMER_ERROR      = 25; // Errors not related to business logic, indicating bugs in the system.
    SYSTEM_ERROR        = 15; // Errors not related to business logic, indicating bugs in the system.

    BUDGET_AUGMENT_FAIL = 5;  // Budget augmentation failed.
    BUDGET_DEBIT_FAIL   = 6;  // Budget debit operation failed.
    BUDGET_LI_DEBIT_FAIL = 33; // Line Item debit operation failed.
    BUDGET_CAMP_DEBIT_FAIL = 34; // Campaign debit operation failed.
    BUDGET_NOT_BIDDABLE = 35; // Unable to bid on a line item due to budget failures.

    FREQ_CAPPED         = 9;  // Filtered by frequency cap.
    CREATIVE_NURL_TOO_LONG = 10; // Fail to build creative in SBS because nurl is too long.
    BUILD_CREATIVE_FAIL = 22; // Generic failure to build creative in SBS.
    DEAL_FILTERED       = 11; // Adcandiate is not eligible for the direct deal.
    // BID_FLOOR_FILTERED status takes precedence over FIX_PRICE_FILTERED and BID_PRICE_FILTERED.
    // For example, if an adcandidate has a bid price that is (1) lower than the bid floor
    // and (2) lower than the bid prices of the selected adcandidates, it will be marked as BID_FLOOR_FILTERED.
    BID_FLOOR_FILTERED  = 20; // Not selected because the bid price sent to the exchange is lower than the bid floor.
    FIX_PRICE_FILTERED  = 12; // Not selected because the bid price sent to the exchange is lower than the bid floor in a fix price direct deal.
    BID_PRICE_FILTERED  = 13; // Not selected because the bid price sent to the exchange is lower than selected adcandidates.
    // BID_FLOOR_FILTERED and FIX_PRICE_FILTERED describe why an adcandidate failed to bid based on the bid price they were going to send to an exchange.
    // If the bid price they were going to send pre any bid reduction or exchange discrepency calculations is less than the bid floor, we want to signify that using a different reason.
    BID_FLOOR_PRE_ADJUST_FILTERED = 31; // Not selected because the bid price determined by SBS is lower than bid floor.
    FIX_PRICE_PRE_ADJUST_FILTERED = 32; // Not selected because the bid price sent to the exchange is lower than the bid floor in a fix price direct deal.
    RENDER_FAIL         = 14; // Fails to render a bid from the adcandidate.
    MISSING_SEAT_INFO   = 16; // Missing Seat Info.
    BLOCKED_SEAT        = 17; // Seat has been blocked from serving.
    SEATID_FILTERED     = 18; // Seat ID was not considered eligible by the exchange.

    MUL_VIDEO_ASSETS    = 21; // Multiple video assets in native request.
    BID_SHADING_ERROR   = 23; // Failed to shade bid

    FES_SANDBOX         = 30; // Bid would have been submitted to the exchange, but the bidder is in sandbox mode.
    GHOST_BID           = 36; // Ghost bid candidate will not enter the internal auction.
     // Bidding Agent Drop Reasons.
     NO_AGENT_BID = 26;
     ZERO_BID_PRICE = 27;
     EXCEED_MAX_BID_PRICE = 28;
     WRONG_BID_CURRENCY = 29;

    // Targeting Drop Reasons.
    TARGETING_UNKNOWN_MISMATCH = 37; // Fails to target a field associated with an unknown module.
    TARGETING_APP_SITE_MISMATCH = 38; // Fails to target a field associated with the app/site module.
    TARGETING_CONTENT_MISMATCH = 39; // Fails to target a field associated with the content module.
    TARGETING_ENVIRONMENT_MISMATCH = 40; // Fails to target a field associated with the environment module.
    TARGETING_EXCHANGE_MISMATCH = 41; // Fails to target a field associated with the exchange module.
    TARGETING_GEO_MISMATCH = 42; // Fails to target a field associated with the geo module.
    TARGETING_PLATFORM_MISMATCH = 43; // Fails to target a field associated with the platform module.
    TARGETING_TIME_MISMATCH = 44; // Fails to target a field associated with the time module.
    TARGETING_USER_MISMATCH = 45; // Fails to target a field associated with the user module.
    TARGETING_VIDEO_MISMATCH = 46; // Fails to target a field associated with the video module.

     reserved 2, 3, 7, 8, 19, 24;
  }
  optional string buzz_key = 1;
  optional int64 customer_id = 2;
  optional Campaign campaign = 3;
  optional LineItem li = 4;
  repeated Creative creatives = 5;
  optional Flight active_flight = 18;
  optional Status status = 6 [default = ALIVE];
  optional BillingInfo billing_info = 7;
  oneof rendered_creative {
     string nurl = 8;
     string adm = 9;
  }
  // imp_url and third_party_imp_urls contain the impression urls iff the exchange
  // supports inventory trackers for the particular segment of their inventory.
  // The exchange supported is denoted in inventory_config.imp_tracker field.
  optional string imp_url = 10;
  repeated string third_party_imp_urls = 12;
  // The matching deal_id for the request. If this field is empty, it
  // means this adcandidate is not a direct deal. Currently we only
  // support one matched deal_id for one request.
  optional string deal_id = 11 [default = ""];

  // Instead of expanding creative template, the "expanded_creative_vars" contains
  // the full expanded System/Derived/Creative Macros.
  // This field is currently used to render the bid response for AppNexus.
  repeated CreativeVar expanded_creative_vars = 16;

  // Next Id: 3
  message MatchingBidModifiersInfo {
    optional uint64 buzz_bid_modifiers_set_id = 1;
    optional float multipliers_product = 2 [default = 1.0];
  }

  optional MatchingBidModifiersInfo matching_bid_modifiers_info = 17;
  // ID of the bid in the bidresponse. It is used to identify the adcandidate
  // when the exchange send us response feedback in a subsequent request.
  // Populated in FES.
  optional string response_feedback_bid_id = 13;
  optional adgroup.TargetedValues logging_target_values = 19;

  // This field indicate if we need the exchange to do bid_translation_service
  // for the bid. We expect the exchange to convert a second price bid into a
  // first price bid for participation in the first price auction.
  // Currently it is set to true for all adx bid requests that are marked as
  // first price.
  optional bool use_bid_translation_service = 20;

  // bid shading information used to aggregate stats
  optional BidShadingInfo bid_shading_info = 21;

  optional uint32 experiment_user_index = 22;

  optional bool is_ghost_bid = 23;

  optional uint32 ghost_bidding_user_index = 24;
}

// Next Id: 10
message AdgroupManifest {
  // Key path to adgroup.pbf.
  optional string adgroup_pb_s3_key = 1;
  // Key path to targeting_list.pbf.
  optional string targeting_list_pb_s3_key = 4;
  // Key path to creative_index.pbf.
  optional string creative_index_pb_s3_key = 5;
  // Key path to bid_modifier_inverted_index_list.pbf.
  optional string bid_modifier_inverted_index_list_pb_s3_key = 6;
  // Key path to cross_device_utilization.pbf.
  optional string cross_device_utilization_pb_s3_key = 7;
  // list of creative_templates(*.tpl) files to be used
  // along with this snapshot of adgroups.
  repeated string creative_template_s3_keys = 2;
  // Key path to targeted_segment_map.pbf.
  optional string targeted_segment_map_pb_s3_key = 8;
  // Key path to segment_to_ttl_map.pbf.
  optional string segment_to_ttl_map_pb_s3_key = 9;
}

